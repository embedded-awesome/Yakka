ifeq ($(filter windows osx linux64,$(HOST_OS)),)
$(error $(HOST_OS) not supported)
endif

ifeq ($(link_TARGET),)
LINKED_BINARY_OUTPUT_DIRECTORY := $(BOB_OUTPUT_BINARY_DIRECTORY)
else
LINKED_BINARY_OUTPUT_DIRECTORY := $(BOB_OUTPUT_BINARY_DIRECTORY)/$(link_TARGET)
endif

# include $(BOB_OUTPUT_DIRECTORY)/compile_summary.mk

ifeq (windows,$(HOST_OS))
TOOLCHAIN_LOCATION :=
#$(CURDIR)/$(HOST_OS)
else
TOOLCHAIN_LOCATION :=
endif

PATH +=c:\silabs\apps\msys64\mingw64\bin;c:\silabs\apps\msys64\usr\bin


c_COMPILER   := "$(TOOLCHAIN_LOCATION)gcc$(HOST_EXECUTABLE_SUFFIX)" 
cpp_COMPILER := "$(TOOLCHAIN_LOCATION)g++$(HOST_EXECUTABLE_SUFFIX)" 
s_COMPILER   :=  $(c_COMPILER)
#ARCHIVER     := "$(TOOLCHAIN_LOCATION)ar$(HOST_EXECUTABLE_SUFFIX)"

# Internally used executables
OBJCOPY   := "$(TOOLCHAIN_LOCATION)objcopy$(HOST_EXECUTABLE_SUFFIX)"
OBJDUMP   := "$(TOOLCHAIN_LOCATION)objdump$(HOST_EXECUTABLE_SUFFIX)"
STRIP_ELF := "$(TOOLCHAIN_LOCATION)strip$(HOST_EXECUTABLE_SUFFIX)"
ifeq (windows,$(HOST_OS))
LINKER    := "$(TOOLCHAIN_LOCATION)g++$(HOST_EXECUTABLE_SUFFIX)"
else
LINKER    := "$(TOOLCHAIN_LOCATION)g++$(HOST_EXECUTABLE_SUFFIX)"
endif
#LINKER    := $(cpp_COMPILER) -fms-compatibility-version=19.00 -v -Xlinker /SUBSYSTEM:CONSOLE -Xlinker /machine:X64 

# Internally used variables
debug_OPTIMIZATION_FLAG   := -Od
release_OPTIMIZATION_FLAG := -O3
COMMON_LINKER_FLAGS  :=
debug_LINKER_FLAGS   := $(COMMON_LINKER_FLAGS) 
release_LINKER_FLAGS := $(COMMON_LINKER_FLAGS) $($(BUILD_TYPE)_OPTIMIZATION_FLAG)
LINKER_SHARED_LIBRARY_OPTION :=-shared
LINKER_PARTIAL_LINK_OPTION   :=-Ur

# Toolchain specific variables
TOOLCHAIN_OPTION_FILE_INDICATOR      :=@
TOOLCHAIN_NO_LINKING_INDICATOR       :=-c
TOOLCHAIN_CREATE_ARCHIVE_INDICATOR   :=rs 
TOOLCHAIN_BINARY_OUTPUT              := $(BOB_OUTPUT_BINARY_DIRECTORY)/$(BOB_PROJECT)$(HOST_EXECUTABLE_SUFFIX)
TOOLCHAIN_COMPILE_OUTPUT_FLAG        :=-o 
TOOLCHAIN_LINKER_PATH_INDICATOR      :=-L 
TOOLCHAIN_OBJECTS_ONLY               := true
TOOLCHAIN_DEPENDENCY_INDICATOR       :=-MD

# Rule to create the elf file
$(BOB_OUTPUT_BINARY_DIRECTORY)/$(BOB_PROJECT)$(HOST_EXECUTABLE_SUFFIX): $(BOB_OUTPUT_DIRECTORY)/build_summary.mk $(BOB_GLOBAL_LINKER_SCRIPT) $(BOB_GENERATED_OBJECTS) | $(BOB_OUTPUT_BINARY_DIRECTORY)
	$(ECHO) Making executable file
ifeq (windows,$(HOST_OS))
	$(LINKER) $(BOB_GENERATED_OBJECTS) $(foreach c,$(BOB_COMPONENT_NAMES),$(addprefix $($(c)_DIRECTORY),$($(c)_LIBRARIES))) $(BOB_GLOBAL_LDFLAGS) -o $@
else
	$(LINKER) $(BOB_GLOBAL_LDFLAGS) -o $@ $(BOB_GENERATED_OBJECTS)
endif
	
$(BOB_OUTPUT_BINARY_DIRECTORY)/$(BOB_PROJECT).fuzz: 
	$(c_COMPILER) -fsanitize=address -fsanitize-coverage=trace-pc-guard
	
